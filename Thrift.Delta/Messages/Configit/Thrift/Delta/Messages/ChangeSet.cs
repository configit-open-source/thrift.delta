/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Configit.Thrift.Delta.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChangeSet : TBase
  {

    public byte[] BaseIdentifier { get; set; }

    public List<PathUpdate> Updates { get; set; }

    public ChangeSet() {
    }

    public ChangeSet(List<PathUpdate> Updates) : this() {
      this.Updates = Updates;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Updates = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              BaseIdentifier = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Updates = new List<PathUpdate>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  PathUpdate _elem10;
                  _elem10 = new PathUpdate();
                  _elem10.Read(iprot);
                  Updates.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
              isset_Updates = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Updates)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ChangeSet");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BaseIdentifier != null) {
        field.Name = "BaseIdentifier";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(BaseIdentifier);
        oprot.WriteFieldEnd();
      }
      field.Name = "Updates";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Updates.Count));
        foreach (PathUpdate _iter11 in Updates)
        {
          _iter11.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as ChangeSet;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(BaseIdentifier, other.BaseIdentifier)
        && TCollections.Equals(Updates, other.Updates);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (BaseIdentifier == null ? 0 : (BaseIdentifier.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((TCollections.GetHashCode(Updates)));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChangeSet(");
      bool __first = true;
      if (BaseIdentifier != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BaseIdentifier: ");
        __sb.Append(BaseIdentifier);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("Updates: ");
      __sb.Append(Updates);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

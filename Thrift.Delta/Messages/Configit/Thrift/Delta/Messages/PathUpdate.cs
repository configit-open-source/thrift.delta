/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Configit.Thrift.Delta.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PathUpdate : TBase
  {

    public List<short> Path { get; set; }

    public Content Content { get; set; }

    public PathUpdate() {
    }

    public PathUpdate(List<short> Path, Content Content) : this() {
      this.Path = Path;
      this.Content = Content;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Path = false;
      bool isset_Content = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Path = new List<short>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  short _elem6;
                  _elem6 = iprot.ReadI16();
                  Path.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
              isset_Path = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Content = new Content();
              Content.Read(iprot);
              isset_Content = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Path)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Content)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PathUpdate");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Path";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I16, Path.Count));
        foreach (short _iter7 in Path)
        {
          oprot.WriteI16(_iter7);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "Content";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Content.Write(oprot);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as PathUpdate;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Path, other.Path)
        && System.Object.Equals(Content, other.Content);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((TCollections.GetHashCode(Path)));
        hashcode = (hashcode * 397) ^ ((Content.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PathUpdate(");
      __sb.Append(", Path: ");
      __sb.Append(Path);
      __sb.Append(", Content: ");
      __sb.Append(Content== null ? "<null>" : Content.ToString());
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

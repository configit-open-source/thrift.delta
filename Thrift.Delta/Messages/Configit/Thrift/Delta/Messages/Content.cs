/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Configit.Thrift.Delta.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Content : TBase
  {

    public Special? Special { get; set; }

    public bool? Bool { get; set; }

    public sbyte? Byte { get; set; }

    public short? Int16 { get; set; }

    public int? Int32 { get; set; }

    public long? Int64 { get; set; }

    public double? Double { get; set; }

    public byte[] Binary { get; set; }

    public string String { get; set; }

    public byte[] Object { get; set; }

    public KeyValue KeyValue { get; set; }

    public List<PathUpdate> Branches { get; set; }

    public Content() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Special = (Special)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Bool = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Byte = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Int16 = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Int32 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Int64 = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              Double = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Binary = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              String = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Object = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              KeyValue = new KeyValue();
              KeyValue.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Branches = new List<PathUpdate>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  PathUpdate _elem2;
                  _elem2 = new PathUpdate();
                  _elem2.Read(iprot);
                  Branches.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Content");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Special != null) {
        field.Name = "Special";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Special.Value);
        oprot.WriteFieldEnd();
      }
      if (Bool != null) {
        field.Name = "Bool";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Bool.Value);
        oprot.WriteFieldEnd();
      }
      if (Byte != null) {
        field.Name = "Byte";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Byte.Value);
        oprot.WriteFieldEnd();
      }
      if (Int16 != null) {
        field.Name = "Int16";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Int16.Value);
        oprot.WriteFieldEnd();
      }
      if (Int32 != null) {
        field.Name = "Int32";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Int32.Value);
        oprot.WriteFieldEnd();
      }
      if (Int64 != null) {
        field.Name = "Int64";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Int64.Value);
        oprot.WriteFieldEnd();
      }
      if (Double != null) {
        field.Name = "Double";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Double.Value);
        oprot.WriteFieldEnd();
      }
      if (Binary != null) {
        field.Name = "Binary";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Binary);
        oprot.WriteFieldEnd();
      }
      if (String != null) {
        field.Name = "String";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(String);
        oprot.WriteFieldEnd();
      }
      if (Object != null) {
        field.Name = "Object";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Object);
        oprot.WriteFieldEnd();
      }
      if (KeyValue != null) {
        field.Name = "KeyValue";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        KeyValue.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Branches != null) {
        field.Name = "Branches";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Branches.Count));
          foreach (PathUpdate _iter3 in Branches)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as Content;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Special, other.Special)
        && System.Object.Equals(Bool, other.Bool)
        && System.Object.Equals(Byte, other.Byte)
        && System.Object.Equals(Int16, other.Int16)
        && System.Object.Equals(Int32, other.Int32)
        && System.Object.Equals(Int64, other.Int64)
        && System.Object.Equals(Double, other.Double)
        && System.Object.Equals(Binary, other.Binary)
        && System.Object.Equals(String, other.String)
        && System.Object.Equals(Object, other.Object)
        && System.Object.Equals(KeyValue, other.KeyValue)
        && TCollections.Equals(Branches, other.Branches);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (Special == null ? 0 : (Special.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Bool == null ? 0 : (Bool.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Byte == null ? 0 : (Byte.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Int16 == null ? 0 : (Int16.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Int32 == null ? 0 : (Int32.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Int64 == null ? 0 : (Int64.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Double == null ? 0 : (Double.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Binary == null ? 0 : (Binary.GetHashCode()));
        hashcode = (hashcode * 397) ^ (String == null ? 0 : (String.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Object == null ? 0 : (Object.GetHashCode()));
        hashcode = (hashcode * 397) ^ (KeyValue == null ? 0 : (KeyValue.GetHashCode()));
        hashcode = (hashcode * 397) ^ (Branches == null ? 0 : (TCollections.GetHashCode(Branches)));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Content(");
      bool __first = true;
      if (Special != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Special: ");
        __sb.Append(Special);
      }
      if (Bool != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bool: ");
        __sb.Append(Bool);
      }
      if (Byte != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Byte: ");
        __sb.Append(Byte);
      }
      if (Int16 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Int16: ");
        __sb.Append(Int16);
      }
      if (Int32 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Int32: ");
        __sb.Append(Int32);
      }
      if (Int64 != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Int64: ");
        __sb.Append(Int64);
      }
      if (Double != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Double: ");
        __sb.Append(Double);
      }
      if (Binary != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Binary: ");
        __sb.Append(Binary);
      }
      if (String != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String: ");
        __sb.Append(String);
      }
      if (Object != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Object: ");
        __sb.Append(Object);
      }
      if (KeyValue != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyValue: ");
        __sb.Append(KeyValue);
      }
      if (Branches != null) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Branches: ");
        __sb.Append(Branches);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

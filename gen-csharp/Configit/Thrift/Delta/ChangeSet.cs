/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Configit.Thrift.Delta
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChangeSet : TBase
  {
    private byte[] _BaseIdentifier;
    private List<NodeChanges> _Changes;

    public byte[] BaseIdentifier
    {
      get
      {
        return _BaseIdentifier;
      }
      set
      {
        __isset.BaseIdentifier = true;
        this._BaseIdentifier = value;
      }
    }

    public List<NodeChanges> Changes
    {
      get
      {
        return _Changes;
      }
      set
      {
        __isset.Changes = true;
        this._Changes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool BaseIdentifier;
      public bool Changes;
    }

    public ChangeSet() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              BaseIdentifier = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Changes = new List<NodeChanges>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  NodeChanges _elem6;
                  _elem6 = new NodeChanges();
                  _elem6.Read(iprot);
                  Changes.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ChangeSet");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BaseIdentifier != null && __isset.BaseIdentifier) {
        field.Name = "BaseIdentifier";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(BaseIdentifier);
        oprot.WriteFieldEnd();
      }
      if (Changes != null && __isset.Changes) {
        field.Name = "Changes";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Changes.Count));
          foreach (NodeChanges _iter7 in Changes)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChangeSet(");
      bool __first = true;
      if (BaseIdentifier != null && __isset.BaseIdentifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BaseIdentifier: ");
        __sb.Append(BaseIdentifier);
      }
      if (Changes != null && __isset.Changes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Changes: ");
        __sb.Append(Changes);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
